{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n  const [fetchedData, setFetchedData] = useState(null);\n  const fetchById = useCallback(async employeeId => {\n    try {\n      const data = await fetchWithCache(\"transactionsByEmployee\", {\n        employeeId\n      });\n      setTransactionsByEmployee(data);\n      setFetchedData(data);\n    } catch (error) {\n      // Handle errors if necessary\n      console.error(\"Error fetching transactions by employee:\", error);\n    }\n  }, [fetchWithCache]);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData,\n    fetchedData\n  };\n}\n_s(useTransactionsByEmployee, \"CnMXfhJFFQVF8KYeiopROSbq/Do=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","_s","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","fetchedData","setFetchedData","fetchById","employeeId","data","error","console","invalidateData"],"sources":["C:/Users/bharg/OneDrive/Desktop/JOBs/Application/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\";\nimport { TransactionsByEmployeeResult } from \"./types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null);\n  const [fetchedData, setFetchedData] = useState<Transaction[] | null>(null);\n\n  const fetchById = useCallback(\n    async (employeeId: string): Promise<void> => {\n      try {\n        const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n          \"transactionsByEmployee\",\n          {\n            employeeId,\n          }\n        );\n\n        setTransactionsByEmployee(data);\n        setFetchedData(data);\n      } catch (error) {\n        // Handle errors if necessary\n        console.error(\"Error fetching transactions by employee:\", error);\n      }\n    },\n    [fetchWithCache]\n  );\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData, fetchedData };\n}\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAG7C,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,SAASC,yBAAyBA,CAAA,EAAiC;EAAAC,EAAA;EACxE,MAAM;IAAEC,cAAc;IAAEC;EAAQ,CAAC,GAAGJ,cAAc,CAAC,CAAC;EACpD,MAAM,CAACK,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGP,QAAQ,CAAuB,IAAI,CAAC;EAChG,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAuB,IAAI,CAAC;EAE1E,MAAMU,SAAS,GAAGX,WAAW,CAC3B,MAAOY,UAAkB,IAAoB;IAC3C,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMR,cAAc,CAC/B,wBAAwB,EACxB;QACEO;MACF,CACF,CAAC;MAEDJ,yBAAyB,CAACK,IAAI,CAAC;MAC/BH,cAAc,CAACG,IAAI,CAAC;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd;MACAC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IAClE;EACF,CAAC,EACD,CAACT,cAAc,CACjB,CAAC;EAED,MAAMW,cAAc,GAAGhB,WAAW,CAAC,MAAM;IACvCQ,yBAAyB,CAAC,IAAI,CAAC;EACjC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEK,IAAI,EAAEN,sBAAsB;IAAED,OAAO;IAAEK,SAAS;IAAEK,cAAc;IAAEP;EAAY,CAAC;AAC1F;AAACL,EAAA,CA9BeD,yBAAyB;EAAA,QACHD,cAAc;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}